#version 450 core

// use 8x8 local group
layout (local_size_x = 8, local_size_y = 8) in;

layout (binding = 0, rgba8) readonly uniform image2D imgIn;
layout (binding = 1, rgba8) writeonly uniform image2D imgOut;

uniform int imgWidth;
uniform int imgHeight;
uniform float coef;

//in uvec3 gl_NumWorkGroups       = global work group size we gave to glDispatchCompute()
//in uvec3 gl_WorkGroupSize       = local work group size we defined in layout with local_size_xyz
//in uvec3 gl_WorkGroupID         = [0, gl_NumWorkGroups.xyz)
//in uvec3 gl_LocalInvocationID   = [0, gl_WorkGroupSize.xyz)
//in uint gl_LocalInvocationIndex = 1D index representation of gl_LocalInvocationID
//in uvec3 gl_GlobalInvocationID  = gl_WorkGroupID * gl_WorkGroupSize + gl_LocalInvocationID

void main() {
    ivec2 ofs[9] = ivec2[](
        ivec2(-1,  1), ivec2(0,  1), ivec2(1,  1),
        ivec2(-1,  0), ivec2(0,  0), ivec2(1,  0),
        ivec2(-1, -1), ivec2(0, -1), ivec2(1, -1)
    );
    // Attention: index[0][0] is corresponded to image left-bottom
    float kernels[2][2][9] = float[][][](
        float[][](
            float[]( // sharpen
                -1, -1, -1,
                -1,  9, -1,
                -1, -1, -1
            ),
            float[](
                1.0/9, 1.0/9, 1.0/9,
                1.0/9, 1.0/9, 1.0/9,
                1.0/9, 1.0/9, 1.0/9
            )
        ),
        float[][](
            float[]( // blur
                1.0 / 16, 2.0 / 16, 1.0 / 16,
                2.0 / 16, 4.0 / 16, 2.0 / 16,
                1.0 / 16, 2.0 / 16, 1.0 / 16
            ),
            float[]( // edge
                1,  1, 1,
                1, -8, 1,
                1,  1, 1
            )
        )
    );

    ivec2 pos = ivec2(gl_GlobalInvocationID.xy); // image pixel position
    ivec2 idx = pos / (ivec2(imgWidth, imgHeight) / 2); // kernel index

    // filter with kernel
    vec3 pixel = vec3(0.0);
    for (int k = 0; k < 9; k ++) {
        pixel += vec3(imageLoad(imgIn, pos + ofs[k])) * kernels[idx.x][idx.y][k];
    }
    vec3 color = imageLoad(imgIn, pos).rgb * coef + pixel * (1.0 - coef);

    imageStore(imgOut, pos, vec4(color, 1.0));
}
